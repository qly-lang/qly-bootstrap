#+TITLE: Qly-lang
Qly is a general purpose, highly customizable, extremely fast, simple, full context type inference and easy to debug programming language. It compiles to multiple target, include native binary in x86, ARM and RISC-V, GPGPU, several quantum computers and Wasm.

- General Purpose: it inspired from Common Lisp, Standard ML, Rebol, Swift and Macro in Asswmbly Languages and provide an extensive set of best features from or improved from these languages to form a developer friendly general purpose language
- Highly Customizable: from parser to code transformation, from runtime to how compiler generate codes, anything can be customized and allow you to create incredible abstraction
- Extremely Fast: By provide nice abstraction over raw assembly and GPGPU (via CoolGate IR), Qly is faster than any other programming language. It's as fast as assembly and in a more complex program, due to all abstraction toolbox in qly, you can even beat assembly language performance
- Simple: core language spec is less than 20 pages, one of the most simplistic programming language is practical.
- Full context type inference: you can leave all types empty, qly can infer from how you're using vars, how function is called from a global context to infer type that a programmer can see in their head. With just a few anootations, you can turn it to some dynamic dispatch to fully static typed. This mad qly both good for prototype and for huge production project
- Easy to debug: compile in debug mode gives you full context, full inspection of every single corner and every single value during the program's life time. It's like a full but more advanced debugger is embbed in debug compilation. It also armed with an advanced condition system that allow you to recover from all kinds of failure in debug comilation, and then just add same error handling to code to make a fully robust, production ready binary. It's easy to debug than any other programming language and you never need to write one debug print.
